{% extends 'oragePage.html.twig' %}
{% block title %}Cours disponibles{% endblock %}

{% block stylesheets %}
    <link rel="stylesheet" href="{{ asset('styles/palette.css') }}">
    <link rel="stylesheet" href="{{ asset('styles/lesson.css') }}">
{% endblock %}

{% block body %}
    {% include "component/navbar.html.twig" %}

    <div class="navbody">
        {% include "component/flashRenderer.html.twig" %}
    </div>

    <div class="container-wrapper">
        <!-- Banni√®re du catalogue -->
        {% set banner_title = "Catalogue des <span class='hero-highlight'>Cours</span>" %}
        {% set banner_description = '<p class="hero-subtitle">D√©couvrez notre collection de cours organis√©s par cat√©gorie et niveau</p>' %}
        {% include "component/banner.html.twig" %}

        <div class="main-content">
            <div class="layout-grid">
                <!-- Menu d'arborescence -->
                <aside class="tree-container">
                    <h3 class="tree-title">
                        <span class="tree-icon">üìö</span>
                        Parcourir les cours
                    </h3>

                    <div class="tree-content">
                        {% for categorie, niveaux in arborescence %}
                            <div class="tree-node">
                                <!-- Cat√©gorie avec toggle -->
                                <div class="tree-toggle" data-category="{{ categorie }}">
                                    <span class="tree-toggle-text">{{ categorie }}</span>
                                    <span class="tree-toggle-arrow">‚ñ∏</span>
                                </div>
                                <div class="tree-children">
                                    {% for niveau, cours_list in niveaux %}
                                        <!-- Niveau de cours -->
                                        <div class="tree-item tree-niveau"
                                             data-categorie="{{ categorie }}"
                                             data-niveau="{{ niveau }}">
                                            <span class="tree-item-icon">üìñ</span>
                                            <span class="tree-item-text">{{ niveau }}</span>
                                            <span class="tree-item-count">({{ cours_list|length }})</span>
                                        </div>
                                    {% endfor %}
                                </div>
                            </div>
                        {% endfor %}
                    </div>
                </aside>

                <!-- Section principale des cours -->
                <section class="courses-section">
                    <div class="section-header">
                        <h2 class="section-title">Cours disponibles</h2>
                        <div class="results-info">
                            <span class="results-count" id="resultsCount">
                                <strong>{{ totalCours ?? 0 }}</strong> cours trouv√©s
                            </span>
                        </div>
                    </div>

                    <!-- Barre de filtre actif -->
                    <div class="filter-bar" id="filterBar" style="display: none;">
                        <div class="filter-content">
                            <span class="filter-label">Filtre actif :</span>
                            <span class="filter-text" id="filterText"></span>
                            <button class="btn-clear-filter" id="clearFilterBtn">
                                <span>‚úï</span> Effacer le filtre
                            </button>
                        </div>
                    </div>

                    <!-- Message vide -->
                    <div class="empty-state" id="emptyState" style="display: none;">
                        <div class="empty-icon">üîç</div>
                        <p class="empty-message">Aucun cours trouv√© avec les crit√®res s√©lectionn√©s</p>
                        <button class="hero-button" id="showAllCoursesBtn">Voir tous les cours</button>
                    </div>

                    <!-- Grille des cours -->
                    <div class="courses-grid" id="coursesGrid">
                        {% for categorie, niveaux in arborescence %}
                            {% for niveau, cours_list in niveaux %}
                                {% for cours in cours_list %}
                                    <article class="course-card"
                                             data-course-id="{{ cours.id }}"
                                             data-category="{{ categorie }}"
                                             data-niveau="{{ niveau }}">
                                        <div class="course-card-header">
                                            <h3 class="course-card-title">{{ cours.nomCours }}</h3>
                                            <p class="course-card-subtitle">{{ cours.getNiveau().getNomNiveau() }}</p>
                                        </div>

                                        <div class="course-card-body">
                                            <div class="course-badges">
                                                <span class="course-badge badge-categorie">
                                                    {{ cours.getCategorie().getLibele() }}
                                                </span>
                                                <span class="course-badge badge-niveau">
                                                    {{ cours.getNiveau().getNomNiveau() }}
                                                </span>
                                            </div>

                                            <p class="course-description">
                                                Ce cours vous initie aux concepts fondamentaux de {{ cours.nomCours }}.
                                                Explorez les notions essentielles et d√©veloppez vos comp√©tences.
                                            </p>

                                            <div class="course-actions">
                                                {% if cours.chapitres is defined and cours.chapitres|length > 0 %}
                                                    {% set firstChapitre = cours.chapitres|first %}
                                                    {% if firstChapitre.depots is defined and firstChapitre.depots|length > 0 %}
                                                        {% set firstDepot = firstChapitre.depots|first %}
                                                        <a href="{{ path('app_depot_show_latest', {'identifier': firstDepot.identifier}) }}"
                                                           class="btn-course btn-primary">
                                                            <span class="btn-icon">üìñ</span>
                                                            Consulter
                                                        </a>
                                                    {% else %}
                                                        <button class="btn-course btn-disabled" disabled>
                                                            <span class="btn-icon">‚è≥</span>
                                                            Bient√¥t disponible
                                                        </button>
                                                    {% endif %}
                                                {% else %}
                                                    <button class="btn-course btn-disabled" disabled>
                                                        <span class="btn-icon">‚è≥</span>
                                                        Bient√¥t disponible
                                                    </button>
                                                {% endif %}

                                                <!-- Bouton de t√©l√©chargement -->
                                                <button class="btn-course btn-secondary download-btn"
                                                        data-course-id="{{ cours.id }}"
                                                        data-course-name="{{ cours.nomCours|e('js') }}">
                                                    <span class="btn-icon">üì•</span>
                                                    T√©l√©charger
                                                </button>
                                            </div>
                                        </div>
                                    </article>
                                {% endfor %}
                            {% endfor %}
                        {% endfor %}
                    </div>
                </section>
            </div>
        </div>
    </div>

    {% include "component/footer.html.twig" %}
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        // On stocke tous les cours pour pouvoir les filtrer plus tard
        let filtreActif = null;
        let tousLesCours = [];

        document.addEventListener('DOMContentLoaded', () => {
            // On r√©cup√®re tous les cours du DOM
            tousLesCours = Array.from(document.querySelectorAll('.course-card'));

            // On ouvre la premi√®re cat√©gorie par d√©faut
            const premierToggle = document.querySelector('.tree-toggle');
            if (premierToggle) {
                basculerArborescence(premierToggle);
            }

            // On attache les √©v√©nements aux boutons d'arborescence
            document.querySelectorAll('.tree-toggle').forEach(toggle => {
                toggle.addEventListener('click', function () {
                    basculerArborescence(this);
                    filtrerParCategorie(this.dataset.category);
                });
            });

            // On attache les √©v√©nements aux niveaux
            document.querySelectorAll('.tree-niveau').forEach(item => {
                item.addEventListener('click', function () {
                    filtrerParNiveau(this.dataset.categorie, this.dataset.niveau, this);
                });
            });

            // On attache les √©v√©nements pour effacer le filtre
            document.getElementById('clearFilterBtn').addEventListener('click', effacerFiltre);
            document.getElementById('showAllCoursesBtn').addEventListener('click', effacerFiltre);

            // On attache les √©v√©nements pour le t√©l√©chargement
            document.querySelectorAll('.download-btn').forEach(btn => {
                btn.addEventListener('click', function () {
                    const courseId = this.dataset.courseId;
                    const courseName = this.dataset.courseName;
                    gererTelechargement(courseId, courseName);
                });
            });
        });

        /**
         * Fonction pour ouvrir/fermer une branche de l'arborescence
         */
        function basculerArborescence(element) {
            const noeud = element.parentElement;
            const enfants = noeud.querySelector('.tree-children'); // Utilis√©e ici
            const fleche = element.querySelector('.tree-toggle-arrow');

            noeud.classList.toggle('open');

            if (noeud.classList.contains('open')) {
                fleche.style.transform = 'rotate(90deg)';
            } else {
                fleche.style.transform = '';
            }
        }

        /**
         * Fonction pour filtrer par niveau (ex: D√©butant, Interm√©diaire)
         */
        function filtrerParNiveau(categorie, niveau, element) {
            // On retire la classe "active" de tous les √©l√©ments
            document.querySelectorAll('.tree-item').forEach(item => {
                item.classList.remove('active');
            });

            // On ajoute la classe "active" √† l'√©l√©ment cliqu√©
            element.classList.add('active');

            // On d√©finit le filtre actif
            filtreActif = {categorie, niveau};
            appliquerFiltre();

            // On affiche la barre de filtre
            const barreFiltre = document.getElementById('filterBar');
            const texteFiltre = document.getElementById('filterText');
            barreFiltre.style.display = 'block';
            texteFiltre.textContent = `${categorie} > ${niveau}`;

            // On scroll vers la section des cours
            document.querySelector('.courses-section').scrollIntoView({
                behavior: 'smooth',
                block: 'start'
            });
        }

        /**
         * Fonction pour filtrer par cat√©gorie (ex: Math√©matiques, Informatique)
         */
        function filtrerParCategorie(categorie) {
            // On retire la classe "active" de tous les niveaux
            document.querySelectorAll('.tree-item').forEach(item => {
                item.classList.remove('active');
            });

            // On d√©finit le filtre (niveau est null pour afficher tous les niveaux)
            filtreActif = {categorie, niveau: null};
            appliquerFiltre();

            // On affiche la barre de filtre
            const barreFiltre = document.getElementById('filterBar');
            const texteFiltre = document.getElementById('filterText');
            barreFiltre.style.display = 'block';
            texteFiltre.textContent = categorie;

            // On scroll vers la section des cours
            document.querySelector('.courses-section').scrollIntoView({
                behavior: 'smooth',
                block: 'start'
            });
        }

        /**
         * Applique le filtre actif sur les cours
         */
        function appliquerFiltre() {
            const etatVide = document.getElementById('emptyState');
            const grilleCours = document.getElementById('coursesGrid');
            let nombreCoursVisibles = 0;

            tousLesCours.forEach(carte => {
                const categorie = carte.dataset.category;
                const niveau = carte.dataset.niveau;

                // On v√©rifie si le cours correspond au filtre
                const categorieOk = !filtreActif?.categorie || categorie === filtreActif.categorie;
                const niveauOk = !filtreActif?.niveau || niveau === filtreActif.niveau;

                if (filtreActif && (!categorieOk || !niveauOk)) {
                    carte.style.display = 'none';
                } else {
                    carte.style.display = '';
                    nombreCoursVisibles++;
                    carte.classList.add('fade-in');
                    setTimeout(() => carte.classList.remove('fade-in'), 500);
                }
            });

            // On met √† jour le compteur
            const compteur = document.getElementById('resultsCount');
            compteur.innerHTML = `<strong>${nombreCoursVisibles}</strong> cours trouv√©${nombreCoursVisibles > 1 ? 's' : ''}`;

            // On affiche ou masque l'√©tat vide
            if (nombreCoursVisibles === 0) {
                etatVide.style.display = 'flex';
                grilleCours.style.display = 'none';
            } else {
                etatVide.style.display = 'none';
                grilleCours.style.display = 'grid';
            }
        }

        /**
         * Efface le filtre actif et r√©affiche tous les cours
         */
        function effacerFiltre() {
            filtreActif = null;

            // On retire la classe active des items
            document.querySelectorAll('.tree-item').forEach(item => {
                item.classList.remove('active');
            });

            // On masque la barre de filtre
            document.getElementById('filterBar').style.display = 'none';

            // On r√©affiche tous les cours
            tousLesCours.forEach(carte => {
                carte.style.display = '';
                carte.classList.add('fade-in');
                setTimeout(() => carte.classList.remove('fade-in'), 500);
            });

            // On met √† jour le compteur
            const compteur = document.getElementById('resultsCount');
            compteur.innerHTML = `<strong>${tousLesCours.length}</strong> cours trouv√©s`;

            // On r√©affiche la grille
            document.getElementById('emptyState').style.display = 'none';
            document.getElementById('coursesGrid').style.display = 'grid';
        }

        /**
         * G√®re le t√©l√©chargement d‚Äôun cours
         */
        function gererTelechargement(courseId, courseName) {
            if (confirm(`Voulez-vous t√©l√©charger le cours "${courseName}" ?`)) {
                const bouton = event.target.closest('.download-btn');
                bouton.innerHTML = '<span class="btn-icon">‚úì</span> T√©l√©chargement...';
                bouton.classList.add('btn-success');

                setTimeout(() => {
                    bouton.innerHTML = '<span class="btn-icon">üì•</span> T√©l√©charger';
                    bouton.classList.remove('btn-success');

                    // TODO: Ajouter la logique r√©elle de t√©l√©chargement
                    // window.location.href = `/course/download/${courseId}`;
                    alert('Le t√©l√©chargement va commencer...');
                }, 1500);
            }
        }
    </script>
{% endblock %}
